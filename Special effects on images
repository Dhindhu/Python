import image_io
import math 
# Use this file to write your filter functions!

def red_stripes(image_matrix):
    for i in range(len(image_matrix)):
        if (i // 50) % 2 == 0:
            for j in range(len(image_matrix[i])):
                image_matrix[i][j] = (255, (image_matrix[i][j])[1], (image_matrix[i][j])[2])
    return image_matrix

def grayscale(image_matrix):
    for i in range(len(image_matrix)):
        for j in range(len(image_matrix[i])):
            color = (((image_matrix[i][j])[0] + (image_matrix[i][j])[1] + (image_matrix[i][j])[2]) / 3)//1
            image_matrix[i][j] = (color, color, color)
    return image_matrix

def invert_colors(image_matrix):
    for i in range(len(image_matrix)):
        for j in range(len(image_matrix[i])):
            image_matrix[i][j] = (255 - (image_matrix[i][j])[0], 255 - (image_matrix[i][j])[1], 255 - (image_matrix[i][j])[2])
    return image_matrix
    

def flip(image_matrix):
    new_matrix = []
    for i in range(len(image_matrix)):
        new_matrix.append(image_matrix[(len(image_matrix)-1)-i])
    return new_matrix
        

def blur(image_matrix):
    copy_matrix = []
    for i in range(len(image_matrix)):
        row = []
        for j in range(len(image_matrix[i])):
            if i == 0 and j == 0:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i][j+1]
                box3 = image_matrix[i+1][j]
                box4 = image_matrix[i+1][j+1]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0])/4), math.floor((box1[1]+box2[1]+box3[1]+box4[1])/4), math.floor((box1[2]+box2[2]+box3[2]+box4[2])/4))
                row.append(ans)
            elif i > 0 and i < len(image_matrix)-1 and j == 0:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i][j+1]
                box3 = image_matrix[i+1][j]
                box4 = image_matrix[i+1][j+1]
                box5 = image_matrix[i-1][j]
                box6 = image_matrix[i-1][j+1]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0]+box5[0]+box6[0])/6), math.floor((box1[1]+box2[1]+box3[1]+box4[1]+box5[1]+box6[1])/6), math.floor((box1[2]+box2[2]+box3[2]+box4[2]+box5[2]+box6[2])/6))
                row.append(ans)
            elif i == len(image_matrix)-1 and j == 0:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i][j+1]
                box3 = image_matrix[i-1][j]
                box4 = image_matrix[i-1][j+1]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0])/4), math.floor((box1[1]+box2[1]+box3[1]+box4[1])/4), math.floor((box1[2]+box2[2]+box3[2]+box4[2])/4))
                row.append(ans)
            elif i == len(image_matrix)-1 and j>0 and j < len(image_matrix[i])-1:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i][j+1]
                box3 = image_matrix[i-1][j]
                box4 = image_matrix[i-1][j+1]
                box5 = image_matrix[i][j-1]
                box6 = image_matrix[i-1][j-1]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0]+box5[0]+box6[0])/6), math.floor((box1[1]+box2[1]+box3[1]+box4[1]+box5[1]+box6[1])/6), math.floor((box1[2]+box2[2]+box3[2]+box4[2]+box5[2]+box6[2])/6))
                row.append(ans)
            elif i == len(image_matrix)-1 and j == len(image_matrix[i])-1:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i-1][j]
                box3 = image_matrix[i][j-1]
                box4 = image_matrix[i-1][j-1]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0])/4), math.floor((box1[1]+box2[1]+box3[1]+box4[1])/4), math.floor((box1[2]+box2[2]+box3[2]+box4[2])/4))
                row.append(ans)
            elif j == len(image_matrix[i])-1 and i < len(image_matrix)-1 and i > 0:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i][j-1]
                box3 = image_matrix[i-1][j]
                box4 = image_matrix[i-1][j-1]
                box5 = image_matrix[i+1][j-1]
                box6 = image_matrix[i+1][j]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0]+box5[0]+box6[0])/6), math.floor((box1[1]+box2[1]+box3[1]+box4[1]+box5[1]+box6[1])/6), math.floor((box1[2]+box2[2]+box3[2]+box4[2]+box5[2]+box6[2])/6))
                row.append(ans)
            elif i == 0 and j == len(image_matrix[i])-1:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i+1][j]
                box3 = image_matrix[i][j-1]
                box4 = image_matrix[i+1][j-1]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0])/4), math.floor((box1[1]+box2[1]+box3[1]+box4[1])/4), math.floor((box1[2]+box2[2]+box3[2]+box4[2])/4))
                row.append(ans)
            elif i == 0 and j > 0 and j < len(image_matrix[i])-1:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i][j-1]
                box3 = image_matrix[i][j+1]
                box4 = image_matrix[i+1][j+1]
                box5 = image_matrix[i+1][j-1]
                box6 = image_matrix[i+1][j]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0]+box5[0]+box6[0])/6), math.floor((box1[1]+box2[1]+box3[1]+box4[1]+box5[1]+box6[1])/6), math.floor((box1[2]+box2[2]+box3[2]+box4[2]+box5[2]+box6[2])/6))
                row.append(ans)
            else:
                box1 = image_matrix[i][j]
                box2 = image_matrix[i][j-1]
                box3 = image_matrix[i][j+1]
                box4 = image_matrix[i+1][j+1]
                box5 = image_matrix[i+1][j-1]
                box6 = image_matrix[i+1][j]
                box7 = image_matrix[i-1][j]
                box8 = image_matrix[i-1][j-1]
                box9 = image_matrix[i-1][j+1]
                ans = (math.floor((box1[0]+box2[0]+box3[0]+box4[0]+box5[0]+box6[0]+box7[0]+box8[0]+box9[0])/9), math.floor((box1[1]+box2[1]+box3[1]+box4[1]+box5[1]+box6[1]+box7[1]+box8[1]+box9[1])/9), math.floor((box1[2]+box2[2]+box3[2]+box4[2]+box5[2]+box6[2]+box7[2]+box8[2]+box9[2])/9))
                row.append(ans)
        copy_matrix.append(row)
    return copy_matrix
def sepia(image_matrix):
    for i in range(len(image_matrix)):
        for j in range(len(image_matrix[i])):
            one = min(math.floor((image_matrix[i][j])[0]*0.393 + (image_matrix[i][j])[1]*0.769 + (image_matrix[i][j])[2]*0.189), 255)
            two = min(math.floor((image_matrix[i][j])[0]*0.349 + (image_matrix[i][j])[1]*0.686 + (image_matrix[i][j])[2]*0.168), 255)
            three = min(math.floor((image_matrix[i][j])[0]*0.272 + (image_matrix[i][j])[1]*0.534 + (image_matrix[i][j])[2]*0.131), 255)
            image_matrix[i][j] = (one, two, three)
    return image_matrix
            
def threshold(image_matrix, 
              red_threshold=(0, 255), 
              green_threshold=(0, 255),
              blue_threshold=(0, 255)):
    for i in range(len(image_matrix)):
        for j in range(len(image_matrix[i])):
            if (image_matrix[i][j])[0] not in range(red_threshold[0], red_threshold[1]+1) or (image_matrix[i][j])[1] not in range(green_threshold[0], green_threshold[1]+1) or (image_matrix[i][j])[2] not in range(blue_threshold[0], blue_threshold[1]+1):
                image_matrix[i][j] = (0, 0, 0)
            else:
                image_matrix[i][j] = image_matrix[i][j]
    return image_matrix
    
///
#image_playground.py
import filters
import image_io

# Use this playground to try out different functions!
image_matrix = image_io.read_file("images/paper.jpeg")
results_matrix = filters.blur(image_matrix)
image_io.write_to_file("outputs/paper_blur.jpeg", results_matrix)
///
///
#image_io.py
"""Utility class to help users read/write image files to a
directory."""
from PIL import Image

def read_file(filepath):
    """
    Read file at file path and return a matrix where the first
    dimension is the vertical and the second dimension is the
    horizontal. Each pixel is represented by a 3-tuple of integers
    representing the red, green and blue scale.

    For instance, imagine you have a 3x2 black and white image that
    makes a "V" shape. This code would return:

    [ [(255, 255, 255), (  0,   0,   0), (255, 255, 255)],
      [   0,   0,   0), (255, 255, 255), (  0,   0,   0)]

    PIL defaults to making the Coordinate system where the
    horizontal is the first dimension and the vertial is the second
    dimension. Source: https://pillow.readthedocs.io/en/latest
    /handbook/concepts.html#coordinate-system.

    Parameters:
    filepath: {str} the relative path to the file to open

    Returns an image matrix as described above.
    """
    image = Image.open(filepath)
    img_data = image.getdata()
    return [[img_data.getpixel((x, y))[:3] for x in range(image.width)] for y in range(image.height)]

def write_to_file(filepath, image_matrix, img_format="png"):
    """
    Write an image matrix to a file. The image matrix must be made
    of 3-tuples of integers.

    Parameters:
    filepath: {str} The relative path to the file to write to.
    image_matrix: {list of lists of tuples} Matrix to write.
    img_format: {str} Optional. Type of file to save as. jpg also
    supported.

    Does not return anything.
    """
    if not image_matrix or not image_matrix[0]:
        raise ValueError("Cannot write image matrix with 0 width or height")

    image = Image.new(
        mode="RGB",
        size=(len(image_matrix[0]), len(image_matrix)))

    for row_index, _ in enumerate(image_matrix[0]):
        for col_index, _ in enumerate(image_matrix):
            pixel = image_matrix[col_index][row_index]
            image.putpixel((row_index, col_index), pixel)

    image.save(filepath, img_format)

///
